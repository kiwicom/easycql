linters-settings:
  dupl:
    threshold: 100
  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint` run to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - performance
      - diagnostic
      - style
    disabled-checks:
      - emptyStringTest
      - unnamedResult  # it is experimental currently and doesn't handle typed channels correctly
  gocyclo:
    # we want to be generous here as the generating functions grow big really fast
    min-complexity: 14
  golint:
    min-confidence: 0
  govet:
    check-shadowing: true
  goconst:
    min-len: 2
    min-occurrences: 3
  goimports:
    local-prefixes: github.com/kiwicom/easycql
  lll:
    line-length: 140
  maligned:
    suggest-new: true
  misspell:
    locale: US
  # we want to be generous here as we write a lot of strings which quickly add up to huge functions
  funlen:
    lines: 80
    statements: 60
  errcheck:
    ignorepkg: fmt
  tagliatelle:
    case:
      rules:
        json: snake

linters:
  enable-all: true
  disable:
    #  Finds slice declarations that could potentially be preallocated
    - prealloc
    - wsl
    - maligned
    - gochecknoglobals
    # Checks that errors returned from external packages are wrapped,
    # can be fixed and removed later but will include a lot of work.
    - wrapcheck
    # linter that makes you use a separate _test package.
    # Most of the tests in this repo are internal, disable this linter.
    - testpackage
    # I don't think we need blank line before each return statement.
    # If you think otherwise feel free to remove this disable statement and fix the issues.
    - nlreturn
    # An analyzer to detect magic numbers. We have a lot of "magic numbers" here, used mainly
    # for type sizes, etc.
    - gomnd
    # Golang linter to check the errors handling expressions. We return a lot of dynamic errors because
    # we the errors will end up in the terminal telling user what went wrong. This linter doesn't make much
    # sense for CLI tools.
    - goerr113
    # Linter for Go software that can be used to find code that will cause problems with the error wrapping scheme
    # introduced in Go 1.13. Again, for the same reasons as goerr113, we don't need this linter for CLI tool.
    - errorlint
    # Checks if all struct fields are initialized. Unnecessarily restrictive.
    - exhaustivestruct
    # check exhaustiveness of enum switch statements. This linter would make the switch statements for individual
    # types super long.
    - exhaustive
    # Used to forbid print statements. But we use those to generate code, so no use here.
    - forbidigo
    # Gci control golang package import order and make it always deterministic.
    # Fails because we have comments for some imports.
    - gci
    # interfacer is not very useful and was obsoleted by its author.
    - interfacer
    # scopelint is deprecated in favor of explortloopref
    - scopelint
    # golint is deprecated (with not suggested alternative)
    - golint
    # we use gocyclo instead of cyclop.
    - cyclop


issues:
  exclude-rules:
    - path: tests/*
      linters:
        - deadcode
        - varcheck
        - unused
        - gomnd
        - dupl
    - path: tests/data.go
      linters:
        - revive
      text: "exported:"

run:
  modules-download-mode: readonly

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: tab

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true
